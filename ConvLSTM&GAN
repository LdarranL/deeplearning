import os
import re
import shutil
from datetime import datetime

def extract_date_from_filename(filename):
    """정규표현식을 이용한 날짜 추출"""
    pattern = r'AIA\.(\d{8})_\d{6}\.\d{4}\.quicklook'
    match = re.match(pattern, filename)
    if match:
        return datetime.strptime(match.group(1), "%Y%m%d")
    return None

# 파일 목록 가져오기
base_dir = r'D:\Solar'
all_files = [f for f in os.listdir(base_dir) 
            if f.startswith('AIA.') and f.endswith('.quicklook')]

# 날짜 정보 포함한 파일 리스트 생성
file_list = []
for f in all_files:
    file_date = extract_date_from_filename(f)
    if file_date:
        file_list.append({'filename': f, 'date': file_date})
    else:
        print(f"잘못된 형식의 파일 제외: {f}")

# 날짜 기준 정렬
sorted_files = sorted(file_list, key=lambda x: x['date'])

def time_series_split(sorted_data, ratios=(0.6, 0.2, 0.2)):
    """날짜 순서 유지하며 분할"""
    total = len(sorted_data)
    train_end = int(total * ratios[0])
    val_end = train_end + int(total * ratios[1])
    
    return (
        [item['filename'] for item in sorted_data[:train_end]],
        [item['filename'] for item in sorted_data[train_end:val_end]],
        [item['filename'] for item in sorted_data[val_end:]]
    )

# 데이터 분할 실행
train_files, val_files, test_files = time_series_split(sorted_files)

def organize_files(file_list, target_dir):
    """파일을 지정된 디렉토리로 이동"""
    os.makedirs(target_dir, exist_ok=True)
    for f in file_list:
        src = os.path.join(base_dir, f)
        dst = os.path.join(target_dir, f)
        shutil.move(src, dst)
        print(f"Moved: {f} -> {dst}")

# 디렉토리 구조 생성
organize_files(train_files, os.path.join(base_dir, 'train'))
organize_files(val_files, os.path.join(base_dir, 'val'))
organize_files(test_files, os.path.join(base_dir, 'test'))

def validate_split_ratio(input_ratio):
    """분할 비율 유효성 검사"""
    if abs(sum(input_ratio) - 1.0) > 0.001:
        raise ValueError("분할 비율 합이 1이 되어야 함")
    if any(r < 0 for r in input_ratio):
        raise ValueError("음수 비율 사용 불가")
        
validate_split_ratio((0.6, 0.2, 0.2))

import matplotlib.pyplot as plt

def visualize_split(sorted_dates, split_points):
    """분할 지점 시각화"""
    plt.figure(figsize=(15, 5))
    plt.plot(sorted_dates, [1]*len(sorted_dates), '|', markersize=10)
    plt.axvline(x=split_points[0], color='r', linestyle='--', label='Train/Val 분할')
    plt.axvline(x=split_points[1], color='g', linestyle='--', label='Val/Test 분할')
    plt.title("날짜 기반 데이터 분할 시각화")
    plt.xlabel("날짜")
    plt.yticks([])
    plt.legend()
    plt.show()

# 분할 지점 날짜 계산
split_dates = [
    sorted_files[len(train_files)-1]['date'],
    sorted_files[len(train_files)+len(val_files)-1]['date']
]
visualize_split([f['date'] for f in sorted_files], split_dates)

import logging

# 로깅 설정
logging.basicConfig(
    filename='data_split.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

try:
    # 기존 분할 로직 실행
    train_files, val_files, test_files = time_series_split(sorted_files)
except Exception as e:
    logging.error(f"분할 실패: {str(e)}")
    raise
else:
    logging.info(f"성공적으로 분할 완료: Train({len(train_files)}), Val({len(val_files)}), Test({len(test_files)})")
